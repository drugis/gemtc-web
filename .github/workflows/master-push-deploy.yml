name: GeMTC-live | push | deploy

on:
  push:
    branches: master

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version: ['18']
        os: [ubuntu-22.04]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('package.json') }}

      - name: run yarn
        run: yarn

      - name: unit tests
        id: tests
        run: yarn test

      - name: build patavi docker image
        run: docker build --tag addis/patavi-gemtc-worker:live R/

      - name: build docker image
        run: ./build-docker.sh GOOGLE Live live

      - name: docker login
        run: docker login -u addis -p ${{ secrets.dockerRegistryPassword }}

      - name: docker push patavi
        run: docker push addis/patavi-gemtc-worker:live

      - name: docker push
        run: docker push addis/gemtc:live

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_ed25519.key
          chmod 600 ~/.ssh/id_ed25519.key
          cat >>~/.ssh/config <<END
          Host jumphost
            HostName $SSH_JUMP_HOST
            User $SSH_JUMP_USER
            IdentityFile ~/.ssh/id_ed25519.key
            StrictHostKeyChecking no
          Host internalserver
            HostName $SSH_INTERNAL_HOST
            User $SSH_INTERNAL_USER  
            IdentityFile ~/.ssh/id_ed25519.key
            StrictHostKeyChecking no
          END
        env:
          SSH_JUMP_USER: ${{ secrets.liveJumpHostUser }}
          SSH_KEY: ${{ secrets.deployPrivateKey }}
          SSH_JUMP_HOST: ${{ secrets.liveJumpHost }}
          SSH_INTERNAL_HOST: ${{ secrets.liveInternalServer }}
          SSH_INTERNAL_USER: ${{ secrets.liveInternalUser }}

      - name: pull latest from github on the server
        run: ssh -J jumphost internalserver 'cd git/gemtc-web && git checkout master && git pull'

      - name: pull image on server
        run: ssh -J jumphost internalserver 'podman pull addis/gemtc:live'

      - name: remove service on the server
        run: >
          ssh -J jumphost internalserver \
          "if  systemctl list-unit-files | grep gemtc
            then
            systemctl stop gemtc
            systemctl disable gemtc
            rm -f /etc/systemd/system/gemtc.service
            systemctl daemon-reload
            fi"

      - name: remove container on the server
        run: ssh -J jumphost internalserver "podman rm -f gemtc || true"

      - name: run liquibase
        run: ssh -J jumphost internalserver './run-gemtc-liquibase.sh'

      - name: run gemtc container on the server
        run: ssh -J jumphost internalserver './run-gemtc.sh'

      - name: generate gemtc system service file
        run: >
          ssh -J jumphost internalserver \
          'podman generate systemd --name gemtc > /etc/systemd/system/gemtc.service'

      - name: stop gemtc container
        run: ssh -J jumphost internalserver 'podman stop gemtc'

      - name: start gemtc service
        run: >
          ssh -J jumphost internalserver \
          "systemctl daemon-reload && \
            systemctl enable gemtc && \
            systemctl start gemtc"

      - name: notify on slack channel on failure
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.slackWebhook }}
          SLACK_USERNAME: gitbot
          SLACK_TITLE: 'Develop push:'
          SLACK_MESSAGE: 'GeMTC deploy failed'

      - name: notify on slack channel on success
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.slackWebhook }}
          SLACK_USERNAME: gitbot
          SLACK_TITLE: 'Develop push:'
          SLACK_MESSAGE: 'GeMTC deployed'
